% Text in Python
% Axiros
% May 12, 2015

# Whats the Problem, Why Should I Care

## what you see != what you get

    #!/usr/bin/env python
    s1 = open('j1').read()
    s2 = open('j2').read()
    print s1, s2
    print s1 == s2

    $ ./1.py
    José José
    False

. . .

### False !?

## unicode to the rescue?

    #!/usr/bin/env python
    u1 = open('j1').read().encode('utf-8')
    u2 = open('j2').read().encode('utf-8')
    print u1, u2, isinstance(u1, unicode)
    print u1 == u2

    $ ./2.py
    José José True
    False

same, same...

## foreground ok - logfile crashes

    #!/usr/bin/env python
    u1 = open('j1').read().decode('utf-8')
    print u1
    print 'success'

    $ ./3.py
    José
    success

    $ ./3.py > test
    UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 3:
    ordinal not in range(128)

. . .

### missing: "``success``"

## no prob?

even if you never use ``decode``

### json you DO use!


    #!/usr/bin/env python
    import sys
    from json import dumps, loads
    print loads(dumps(sys.argv[1]))
    print 'success'

run:

    $ ./4.py Hans | more
    Hans
    $ ./4.py José | more
    Traceback (most recent call last):
        print loads(dumps(sys.argv[1]))
    UnicodeEncodeError: 'ascii' codec can't encode character...


## apropos: json

    #!/usr/bin/env python
    import sys
    from json import dumps, loads

    here  = sys.argv[1]
    there = loads(dumps(here))
    print here, there
    print here == there

. . .

    $ ./5.py Hans
    Hans Hans
    True
    $ ./5.py José
    José José
    False
    $ ./5.py José | more
    Traceback (most recent call last):
    UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in
    position 3: ordinal not in range(128)
    José


## not to forget

the well known ``str()``, ``%s`` problems

    >>> from json import loads, dumps
    >>> received = loads(dumps('José'))
    >>> str(received)
    Traceback (most recent call last):
    UnicodeEncodeError: 'ascii' codec cant encode character
    u'\xe9' in position 3:
    ordinal not in range(128)

. . .

    >>> json.loads(json.dumps('Hans')) + 'José'
    Traceback (most recent call last):
    UnicodeEncodeError: 'ascii' codec cant encode character...

. . .

    >>> u'%s' % 'José'
    Traceback (most recent call last): ...
    UnicodeDecodeError: 'ascii' codec cant decode ...


# Doomed?!

Google says: Python 2 unicode handling is

- [broken](https://news.ycombinator.com/item?id=7012683)
- [pain](http://nedbatchelder.com/text/unipain.html)
- [inconsistent, frustrating](https://pythonhosted.org/kitchen/unicode-frustrations.html)
- [extremly shitty](http://t-a-w.blogspot.de/2013/09/python-3-unicode-apparently-no-longer.html)
- [possibly leading to data
  corruption](http://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html)
- [causing nervous breakdowns](https://github.com/thp/python2sucks)

and 10000 of the like, typically pointing to Python3's unicode everywhere
model.
Which is the major compatibility breaker between 2 and 3.

# what to do

## Official Answer:

Decode [everywhere](http://nedbatchelder.com/text/unipain.html) - like in Py3

<img src="../images/sandwich.png" alt="sw" style="width: 500px;" />


# Feasible

Think a second about what this means:

- *Computers* process, forward, store only bytes
- *Humans* process text, i.e. symbols - which the unicode standard enumerates
  worldwide (around 1Mio Codepoints)





